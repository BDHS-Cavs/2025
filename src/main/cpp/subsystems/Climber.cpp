// THIS FILE IS FROM 2024 - OUR 2025 CODE WILL PROBABLY NOT KEEP THIS FILE, IT IS JUST TO MAKE PROGRAMMING 2025 EASIER

// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "subsystems/Climber.h"

#include <frc/smartdashboard/SmartDashboard.h>
#include <wpi/raw_ostream.h> // for wpi outs()


Climber::Climber(){
    SetName("Climber");
    SetSubsystem("Climber");

    //AddChild("ClimberMotor1", &m_climberMotor1);//todo
    m_climberMotor1.SetInverted(false);

    //AddChild("ClimberMotor2", &m_climberMotor2);//todo
    m_climberMotor2.SetInverted(true);

    //AddChild("ClimberMotors", &m_climberMotors);//todo

    m_climberMotor1.SetIdleMode(rev::CANSparkBase::IdleMode::kBrake);
    m_climberMotor2.SetIdleMode(rev::CANSparkBase::IdleMode::kBrake);
}

void Climber::Periodic() {
    // Put code here to be run every loop
}

void Climber::SimulationPeriodic() {
}

// Put methods for controlling this subsystem here and call from commands

void Climber::ClimberRaise(){ 
    // Run Climber Raise
    frc::SmartDashboard::PutNumber("Climber Encoder 2 Value", m_climberEncoder2.GetPosition());
    if(m_climberEncoder2.GetPosition() > -492)
    {
        m_climberMotor1.Set(-1.0);
        m_climberMotor2.Set(-1.0);
    }
    else
    {
        m_climberMotor1.Set(0.0);
        m_climberMotor2.Set(0.0);
    }
} 

void Climber::ClimberLower(){
    // Run Climber Lower
    frc::SmartDashboard::PutNumber("Climber Encoder 2 Value", m_climberEncoder2.GetPosition());
    if(m_climberEncoder2.GetPosition() < 0)
    {
        m_climberMotor1.Set(1.0);
        m_climberMotor2.Set(1.0);
    }
    else
    {
        m_climberMotor1.Set(0.0);
        m_climberMotor2.Set(0.0);
    }
}

void Climber::ClimberStop(){
    // Stop the Climber motors
    m_climberMotor1.Set(0.0);
    m_climberMotor2.Set(0.0);  
}